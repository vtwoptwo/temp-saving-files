// Generated by gencpp from file panther_msgs/SetLEDImageAnimationRequest.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_SETLEDIMAGEANIMATIONREQUEST_H
#define PANTHER_MSGS_MESSAGE_SETLEDIMAGEANIMATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panther_msgs/LEDImageAnimation.h>
#include <panther_msgs/LEDImageAnimation.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct SetLEDImageAnimationRequest_
{
  typedef SetLEDImageAnimationRequest_<ContainerAllocator> Type;

  SetLEDImageAnimationRequest_()
    : front()
    , rear()
    , repeating(false)  {
    }
  SetLEDImageAnimationRequest_(const ContainerAllocator& _alloc)
    : front(_alloc)
    , rear(_alloc)
    , repeating(false)  {
  (void)_alloc;
    }



   typedef  ::panther_msgs::LEDImageAnimation_<ContainerAllocator>  _front_type;
  _front_type front;

   typedef  ::panther_msgs::LEDImageAnimation_<ContainerAllocator>  _rear_type;
  _rear_type rear;

   typedef uint8_t _repeating_type;
  _repeating_type repeating;





  typedef boost::shared_ptr< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLEDImageAnimationRequest_

typedef ::panther_msgs::SetLEDImageAnimationRequest_<std::allocator<void> > SetLEDImageAnimationRequest;

typedef boost::shared_ptr< ::panther_msgs::SetLEDImageAnimationRequest > SetLEDImageAnimationRequestPtr;
typedef boost::shared_ptr< ::panther_msgs::SetLEDImageAnimationRequest const> SetLEDImageAnimationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator1> & lhs, const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.front == rhs.front &&
    lhs.rear == rhs.rear &&
    lhs.repeating == rhs.repeating;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator1> & lhs, const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fe9a29aafdecbd1db4304f1971b8337";
  }

  static const char* value(const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fe9a29aafdecbd1ULL;
  static const uint64_t static_value2 = 0xdb4304f1971b8337ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/SetLEDImageAnimationRequest";
  }

  static const char* value(const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/LEDImageAnimation front\n"
"panther_msgs/LEDImageAnimation rear\n"
"bool repeating\n"
"\n"
"================================================================================\n"
"MSG: panther_msgs/LEDImageAnimation\n"
"string image\n"
"float32 duration\n"
"float32 brightness\n"
"uint8 repeat\n"
"uint32 color\n"
;
  }

  static const char* value(const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.rear);
      stream.next(m.repeating);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLEDImageAnimationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::SetLEDImageAnimationRequest_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    s << std::endl;
    Printer< ::panther_msgs::LEDImageAnimation_<ContainerAllocator> >::stream(s, indent + "  ", v.front);
    s << indent << "rear: ";
    s << std::endl;
    Printer< ::panther_msgs::LEDImageAnimation_<ContainerAllocator> >::stream(s, indent + "  ", v.rear);
    s << indent << "repeating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.repeating);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_SETLEDIMAGEANIMATIONREQUEST_H
