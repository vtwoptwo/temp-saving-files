// Generated by gencpp from file panther_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_MOTORSTATE_H
#define PANTHER_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panther_msgs/RuntimeError.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : motor_joint_name()
    , runtime_error()  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : motor_joint_name(_alloc)
    , runtime_error(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _motor_joint_name_type;
  _motor_joint_name_type motor_joint_name;

   typedef  ::panther_msgs::RuntimeError_<ContainerAllocator>  _runtime_error_type;
  _runtime_error_type runtime_error;





  typedef boost::shared_ptr< ::panther_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::panther_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::panther_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::panther_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::MotorState_<ContainerAllocator1> & lhs, const ::panther_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.motor_joint_name == rhs.motor_joint_name &&
    lhs.runtime_error == rhs.runtime_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::MotorState_<ContainerAllocator1> & lhs, const ::panther_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77b28dab8f3bd880daefbd7dfd1955e8";
  }

  static const char* value(const ::panther_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77b28dab8f3bd880ULL;
  static const uint64_t static_value2 = 0xdaefbd7dfd1955e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/MotorState";
  }

  static const char* value(const ::panther_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string motor_joint_name\n"
"panther_msgs/RuntimeError runtime_error\n"
"================================================================================\n"
"MSG: panther_msgs/RuntimeError\n"
"bool amps_limit_active\n"
"bool motor_stall\n"
"bool loop_error\n"
"bool safety_stop_active\n"
"bool forward_limit_triggered\n"
"bool reverse_limit_triggered\n"
"bool amps_trigger_activated\n"
;
  }

  static const char* value(const ::panther_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_joint_name);
      stream.next(m.runtime_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "motor_joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.motor_joint_name);
    s << indent << "runtime_error: ";
    s << std::endl;
    Printer< ::panther_msgs::RuntimeError_<ContainerAllocator> >::stream(s, indent + "  ", v.runtime_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_MOTORSTATE_H
