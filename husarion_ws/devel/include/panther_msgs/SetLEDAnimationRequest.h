// Generated by gencpp from file panther_msgs/SetLEDAnimationRequest.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_SETLEDANIMATIONREQUEST_H
#define PANTHER_MSGS_MESSAGE_SETLEDANIMATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panther_msgs/LEDAnimation.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct SetLEDAnimationRequest_
{
  typedef SetLEDAnimationRequest_<ContainerAllocator> Type;

  SetLEDAnimationRequest_()
    : animation()
    , repeating(false)  {
    }
  SetLEDAnimationRequest_(const ContainerAllocator& _alloc)
    : animation(_alloc)
    , repeating(false)  {
  (void)_alloc;
    }



   typedef  ::panther_msgs::LEDAnimation_<ContainerAllocator>  _animation_type;
  _animation_type animation;

   typedef uint8_t _repeating_type;
  _repeating_type repeating;





  typedef boost::shared_ptr< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLEDAnimationRequest_

typedef ::panther_msgs::SetLEDAnimationRequest_<std::allocator<void> > SetLEDAnimationRequest;

typedef boost::shared_ptr< ::panther_msgs::SetLEDAnimationRequest > SetLEDAnimationRequestPtr;
typedef boost::shared_ptr< ::panther_msgs::SetLEDAnimationRequest const> SetLEDAnimationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator1> & lhs, const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.animation == rhs.animation &&
    lhs.repeating == rhs.repeating;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator1> & lhs, const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e234c499508771a9b399989673df1b68";
  }

  static const char* value(const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe234c499508771a9ULL;
  static const uint64_t static_value2 = 0xb399989673df1b68ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/SetLEDAnimationRequest";
  }

  static const char* value(const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/LEDAnimation animation\n"
"bool repeating\n"
"\n"
"================================================================================\n"
"MSG: panther_msgs/LEDAnimation\n"
"uint16 E_STOP = 0\n"
"uint16 READY = 1\n"
"uint16 ERROR = 2\n"
"uint16 MANUAL_ACTION = 3\n"
"uint16 AUTONOMOUS_ACTION = 4\n"
"uint16 GOAL_ACHIEVED = 5\n"
"uint16 LOW_BATTERY = 6\n"
"uint16 CRITICAL_BATTERY = 7\n"
"uint16 BATTERY_STATE = 8\n"
"uint16 CHARGING_BATTERY = 9\n"
"\n"
"uint16 id\n"
"string param\n"
;
  }

  static const char* value(const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.animation);
      stream.next(m.repeating);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLEDAnimationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::SetLEDAnimationRequest_<ContainerAllocator>& v)
  {
    s << indent << "animation: ";
    s << std::endl;
    Printer< ::panther_msgs::LEDAnimation_<ContainerAllocator> >::stream(s, indent + "  ", v.animation);
    s << indent << "repeating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.repeating);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_SETLEDANIMATIONREQUEST_H
