// Generated by gencpp from file panther_msgs/SystemStatus.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_SYSTEMSTATUS_H
#define PANTHER_MSGS_MESSAGE_SYSTEMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct SystemStatus_
{
  typedef SystemStatus_<ContainerAllocator> Type;

  SystemStatus_()
    : header()
    , cpu_percent()
    , cpu_temp(0.0)
    , avg_load_percent(0.0)
    , ram_usage_percent(0.0)
    , disc_usage_percent(0.0)  {
    }
  SystemStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cpu_percent(_alloc)
    , cpu_temp(0.0)
    , avg_load_percent(0.0)
    , ram_usage_percent(0.0)
    , disc_usage_percent(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _cpu_percent_type;
  _cpu_percent_type cpu_percent;

   typedef float _cpu_temp_type;
  _cpu_temp_type cpu_temp;

   typedef float _avg_load_percent_type;
  _avg_load_percent_type avg_load_percent;

   typedef float _ram_usage_percent_type;
  _ram_usage_percent_type ram_usage_percent;

   typedef float _disc_usage_percent_type;
  _disc_usage_percent_type disc_usage_percent;





  typedef boost::shared_ptr< ::panther_msgs::SystemStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::SystemStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SystemStatus_

typedef ::panther_msgs::SystemStatus_<std::allocator<void> > SystemStatus;

typedef boost::shared_ptr< ::panther_msgs::SystemStatus > SystemStatusPtr;
typedef boost::shared_ptr< ::panther_msgs::SystemStatus const> SystemStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::SystemStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::SystemStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::SystemStatus_<ContainerAllocator1> & lhs, const ::panther_msgs::SystemStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cpu_percent == rhs.cpu_percent &&
    lhs.cpu_temp == rhs.cpu_temp &&
    lhs.avg_load_percent == rhs.avg_load_percent &&
    lhs.ram_usage_percent == rhs.ram_usage_percent &&
    lhs.disc_usage_percent == rhs.disc_usage_percent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::SystemStatus_<ContainerAllocator1> & lhs, const ::panther_msgs::SystemStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SystemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::SystemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SystemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::SystemStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SystemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::SystemStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52a7bb997a88ff007b47b0547fe4a966";
  }

  static const char* value(const ::panther_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52a7bb997a88ff00ULL;
  static const uint64_t static_value2 = 0x7b47b0547fe4a966ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/SystemStatus";
  }

  static const char* value(const ::panther_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::SystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32[] cpu_percent\n"
"float32 cpu_temp\n"
"float32 avg_load_percent\n"
"float32 ram_usage_percent\n"
"float32 disc_usage_percent\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::panther_msgs::SystemStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::SystemStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cpu_percent);
      stream.next(m.cpu_temp);
      stream.next(m.avg_load_percent);
      stream.next(m.ram_usage_percent);
      stream.next(m.disc_usage_percent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::SystemStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::SystemStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cpu_percent[]" << std::endl;
    for (size_t i = 0; i < v.cpu_percent.size(); ++i)
    {
      s << indent << "  cpu_percent[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cpu_percent[i]);
    }
    s << indent << "cpu_temp: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_temp);
    s << indent << "avg_load_percent: ";
    Printer<float>::stream(s, indent + "  ", v.avg_load_percent);
    s << indent << "ram_usage_percent: ";
    Printer<float>::stream(s, indent + "  ", v.ram_usage_percent);
    s << indent << "disc_usage_percent: ";
    Printer<float>::stream(s, indent + "  ", v.disc_usage_percent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_SYSTEMSTATUS_H
