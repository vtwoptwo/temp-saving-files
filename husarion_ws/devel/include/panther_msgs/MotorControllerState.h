// Generated by gencpp from file panther_msgs/MotorControllerState.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_MOTORCONTROLLERSTATE_H
#define PANTHER_MSGS_MESSAGE_MOTORCONTROLLERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panther_msgs/FaultFlag.h>
#include <panther_msgs/ScriptFlag.h>
#include <panther_msgs/MotorState.h>
#include <panther_msgs/MotorState.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct MotorControllerState_
{
  typedef MotorControllerState_<ContainerAllocator> Type;

  MotorControllerState_()
    : voltage(0.0)
    , current(0.0)
    , temperature(0.0)
    , fault_flag()
    , script_flag()
    , left_motor()
    , right_motor()  {
    }
  MotorControllerState_(const ContainerAllocator& _alloc)
    : voltage(0.0)
    , current(0.0)
    , temperature(0.0)
    , fault_flag(_alloc)
    , script_flag(_alloc)
    , left_motor(_alloc)
    , right_motor(_alloc)  {
  (void)_alloc;
    }



   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef  ::panther_msgs::FaultFlag_<ContainerAllocator>  _fault_flag_type;
  _fault_flag_type fault_flag;

   typedef  ::panther_msgs::ScriptFlag_<ContainerAllocator>  _script_flag_type;
  _script_flag_type script_flag;

   typedef  ::panther_msgs::MotorState_<ContainerAllocator>  _left_motor_type;
  _left_motor_type left_motor;

   typedef  ::panther_msgs::MotorState_<ContainerAllocator>  _right_motor_type;
  _right_motor_type right_motor;





  typedef boost::shared_ptr< ::panther_msgs::MotorControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::MotorControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorControllerState_

typedef ::panther_msgs::MotorControllerState_<std::allocator<void> > MotorControllerState;

typedef boost::shared_ptr< ::panther_msgs::MotorControllerState > MotorControllerStatePtr;
typedef boost::shared_ptr< ::panther_msgs::MotorControllerState const> MotorControllerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::MotorControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::MotorControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::MotorControllerState_<ContainerAllocator1> & lhs, const ::panther_msgs::MotorControllerState_<ContainerAllocator2> & rhs)
{
  return lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.temperature == rhs.temperature &&
    lhs.fault_flag == rhs.fault_flag &&
    lhs.script_flag == rhs.script_flag &&
    lhs.left_motor == rhs.left_motor &&
    lhs.right_motor == rhs.right_motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::MotorControllerState_<ContainerAllocator1> & lhs, const ::panther_msgs::MotorControllerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::MotorControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::MotorControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::MotorControllerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20ed5f1b3f79d90615a0b88922a91b07";
  }

  static const char* value(const ::panther_msgs::MotorControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20ed5f1b3f79d906ULL;
  static const uint64_t static_value2 = 0x15a0b88922a91b07ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/MotorControllerState";
  }

  static const char* value(const ::panther_msgs::MotorControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 voltage\n"
"float32 current\n"
"float32 temperature\n"
"panther_msgs/FaultFlag fault_flag\n"
"panther_msgs/ScriptFlag script_flag\n"
"panther_msgs/MotorState left_motor\n"
"panther_msgs/MotorState right_motor\n"
"================================================================================\n"
"MSG: panther_msgs/FaultFlag\n"
"bool can_net_err\n"
"bool overheat\n"
"bool overvoltage\n"
"bool undervoltage\n"
"bool short_circuit\n"
"bool emergency_stop\n"
"bool motor_or_sensor_setup_fault\n"
"bool mosfet_failure\n"
"bool default_config_loaded_at_startup\n"
"================================================================================\n"
"MSG: panther_msgs/ScriptFlag\n"
"bool loop_error\n"
"bool encoder_disconected\n"
"bool amp_limiter\n"
"================================================================================\n"
"MSG: panther_msgs/MotorState\n"
"string motor_joint_name\n"
"panther_msgs/RuntimeError runtime_error\n"
"================================================================================\n"
"MSG: panther_msgs/RuntimeError\n"
"bool amps_limit_active\n"
"bool motor_stall\n"
"bool loop_error\n"
"bool safety_stop_active\n"
"bool forward_limit_triggered\n"
"bool reverse_limit_triggered\n"
"bool amps_trigger_activated\n"
;
  }

  static const char* value(const ::panther_msgs::MotorControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.temperature);
      stream.next(m.fault_flag);
      stream.next(m.script_flag);
      stream.next(m.left_motor);
      stream.next(m.right_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::MotorControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::MotorControllerState_<ContainerAllocator>& v)
  {
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "fault_flag: ";
    s << std::endl;
    Printer< ::panther_msgs::FaultFlag_<ContainerAllocator> >::stream(s, indent + "  ", v.fault_flag);
    s << indent << "script_flag: ";
    s << std::endl;
    Printer< ::panther_msgs::ScriptFlag_<ContainerAllocator> >::stream(s, indent + "  ", v.script_flag);
    s << indent << "left_motor: ";
    s << std::endl;
    Printer< ::panther_msgs::MotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.left_motor);
    s << indent << "right_motor: ";
    s << std::endl;
    Printer< ::panther_msgs::MotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.right_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_MOTORCONTROLLERSTATE_H
