// Generated by gencpp from file panther_msgs/RuntimeError.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_RUNTIMEERROR_H
#define PANTHER_MSGS_MESSAGE_RUNTIMEERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panther_msgs
{
template <class ContainerAllocator>
struct RuntimeError_
{
  typedef RuntimeError_<ContainerAllocator> Type;

  RuntimeError_()
    : amps_limit_active(false)
    , motor_stall(false)
    , loop_error(false)
    , safety_stop_active(false)
    , forward_limit_triggered(false)
    , reverse_limit_triggered(false)
    , amps_trigger_activated(false)  {
    }
  RuntimeError_(const ContainerAllocator& _alloc)
    : amps_limit_active(false)
    , motor_stall(false)
    , loop_error(false)
    , safety_stop_active(false)
    , forward_limit_triggered(false)
    , reverse_limit_triggered(false)
    , amps_trigger_activated(false)  {
  (void)_alloc;
    }



   typedef uint8_t _amps_limit_active_type;
  _amps_limit_active_type amps_limit_active;

   typedef uint8_t _motor_stall_type;
  _motor_stall_type motor_stall;

   typedef uint8_t _loop_error_type;
  _loop_error_type loop_error;

   typedef uint8_t _safety_stop_active_type;
  _safety_stop_active_type safety_stop_active;

   typedef uint8_t _forward_limit_triggered_type;
  _forward_limit_triggered_type forward_limit_triggered;

   typedef uint8_t _reverse_limit_triggered_type;
  _reverse_limit_triggered_type reverse_limit_triggered;

   typedef uint8_t _amps_trigger_activated_type;
  _amps_trigger_activated_type amps_trigger_activated;





  typedef boost::shared_ptr< ::panther_msgs::RuntimeError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::RuntimeError_<ContainerAllocator> const> ConstPtr;

}; // struct RuntimeError_

typedef ::panther_msgs::RuntimeError_<std::allocator<void> > RuntimeError;

typedef boost::shared_ptr< ::panther_msgs::RuntimeError > RuntimeErrorPtr;
typedef boost::shared_ptr< ::panther_msgs::RuntimeError const> RuntimeErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::RuntimeError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::RuntimeError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::RuntimeError_<ContainerAllocator1> & lhs, const ::panther_msgs::RuntimeError_<ContainerAllocator2> & rhs)
{
  return lhs.amps_limit_active == rhs.amps_limit_active &&
    lhs.motor_stall == rhs.motor_stall &&
    lhs.loop_error == rhs.loop_error &&
    lhs.safety_stop_active == rhs.safety_stop_active &&
    lhs.forward_limit_triggered == rhs.forward_limit_triggered &&
    lhs.reverse_limit_triggered == rhs.reverse_limit_triggered &&
    lhs.amps_trigger_activated == rhs.amps_trigger_activated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::RuntimeError_<ContainerAllocator1> & lhs, const ::panther_msgs::RuntimeError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::RuntimeError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::RuntimeError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::RuntimeError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::RuntimeError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::RuntimeError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::RuntimeError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::RuntimeError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e114213d0c80320bc7a928841db326e";
  }

  static const char* value(const ::panther_msgs::RuntimeError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e114213d0c80320ULL;
  static const uint64_t static_value2 = 0xbc7a928841db326eULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::RuntimeError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/RuntimeError";
  }

  static const char* value(const ::panther_msgs::RuntimeError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::RuntimeError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool amps_limit_active\n"
"bool motor_stall\n"
"bool loop_error\n"
"bool safety_stop_active\n"
"bool forward_limit_triggered\n"
"bool reverse_limit_triggered\n"
"bool amps_trigger_activated\n"
;
  }

  static const char* value(const ::panther_msgs::RuntimeError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::RuntimeError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.amps_limit_active);
      stream.next(m.motor_stall);
      stream.next(m.loop_error);
      stream.next(m.safety_stop_active);
      stream.next(m.forward_limit_triggered);
      stream.next(m.reverse_limit_triggered);
      stream.next(m.amps_trigger_activated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RuntimeError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::RuntimeError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::RuntimeError_<ContainerAllocator>& v)
  {
    s << indent << "amps_limit_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.amps_limit_active);
    s << indent << "motor_stall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_stall);
    s << indent << "loop_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loop_error);
    s << indent << "safety_stop_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safety_stop_active);
    s << indent << "forward_limit_triggered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward_limit_triggered);
    s << indent << "reverse_limit_triggered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse_limit_triggered);
    s << indent << "amps_trigger_activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.amps_trigger_activated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_RUNTIMEERROR_H
