// Generated by gencpp from file panther_msgs/DriverState.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_DRIVERSTATE_H
#define PANTHER_MSGS_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panther_msgs/MotorControllerState.h>
#include <panther_msgs/MotorControllerState.h>

namespace panther_msgs
{
template <class ContainerAllocator>
struct DriverState_
{
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
    : front()
    , rear()  {
    }
  DriverState_(const ContainerAllocator& _alloc)
    : front(_alloc)
    , rear(_alloc)  {
  (void)_alloc;
    }



   typedef  ::panther_msgs::MotorControllerState_<ContainerAllocator>  _front_type;
  _front_type front;

   typedef  ::panther_msgs::MotorControllerState_<ContainerAllocator>  _rear_type;
  _rear_type rear;





  typedef boost::shared_ptr< ::panther_msgs::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::DriverState_<ContainerAllocator> const> ConstPtr;

}; // struct DriverState_

typedef ::panther_msgs::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::panther_msgs::DriverState > DriverStatePtr;
typedef boost::shared_ptr< ::panther_msgs::DriverState const> DriverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::DriverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::DriverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::DriverState_<ContainerAllocator1> & lhs, const ::panther_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return lhs.front == rhs.front &&
    lhs.rear == rhs.rear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::DriverState_<ContainerAllocator1> & lhs, const ::panther_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::DriverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::DriverState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::DriverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::DriverState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "475379213c09f61430c9f6dcd6c19337";
  }

  static const char* value(const ::panther_msgs::DriverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x475379213c09f614ULL;
  static const uint64_t static_value2 = 0x30c9f6dcd6c19337ULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/DriverState";
  }

  static const char* value(const ::panther_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/MotorControllerState front\n"
"panther_msgs/MotorControllerState rear\n"
"================================================================================\n"
"MSG: panther_msgs/MotorControllerState\n"
"float32 voltage\n"
"float32 current\n"
"float32 temperature\n"
"panther_msgs/FaultFlag fault_flag\n"
"panther_msgs/ScriptFlag script_flag\n"
"panther_msgs/MotorState left_motor\n"
"panther_msgs/MotorState right_motor\n"
"================================================================================\n"
"MSG: panther_msgs/FaultFlag\n"
"bool can_net_err\n"
"bool overheat\n"
"bool overvoltage\n"
"bool undervoltage\n"
"bool short_circuit\n"
"bool emergency_stop\n"
"bool motor_or_sensor_setup_fault\n"
"bool mosfet_failure\n"
"bool default_config_loaded_at_startup\n"
"================================================================================\n"
"MSG: panther_msgs/ScriptFlag\n"
"bool loop_error\n"
"bool encoder_disconected\n"
"bool amp_limiter\n"
"================================================================================\n"
"MSG: panther_msgs/MotorState\n"
"string motor_joint_name\n"
"panther_msgs/RuntimeError runtime_error\n"
"================================================================================\n"
"MSG: panther_msgs/RuntimeError\n"
"bool amps_limit_active\n"
"bool motor_stall\n"
"bool loop_error\n"
"bool safety_stop_active\n"
"bool forward_limit_triggered\n"
"bool reverse_limit_triggered\n"
"bool amps_trigger_activated\n"
;
  }

  static const char* value(const ::panther_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::DriverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.rear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::DriverState_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    s << std::endl;
    Printer< ::panther_msgs::MotorControllerState_<ContainerAllocator> >::stream(s, indent + "  ", v.front);
    s << indent << "rear: ";
    s << std::endl;
    Printer< ::panther_msgs::MotorControllerState_<ContainerAllocator> >::stream(s, indent + "  ", v.rear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_DRIVERSTATE_H
