// Generated by gencpp from file panther_msgs/FaultFlag.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_FAULTFLAG_H
#define PANTHER_MSGS_MESSAGE_FAULTFLAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panther_msgs
{
template <class ContainerAllocator>
struct FaultFlag_
{
  typedef FaultFlag_<ContainerAllocator> Type;

  FaultFlag_()
    : can_net_err(false)
    , overheat(false)
    , overvoltage(false)
    , undervoltage(false)
    , short_circuit(false)
    , emergency_stop(false)
    , motor_or_sensor_setup_fault(false)
    , mosfet_failure(false)
    , default_config_loaded_at_startup(false)  {
    }
  FaultFlag_(const ContainerAllocator& _alloc)
    : can_net_err(false)
    , overheat(false)
    , overvoltage(false)
    , undervoltage(false)
    , short_circuit(false)
    , emergency_stop(false)
    , motor_or_sensor_setup_fault(false)
    , mosfet_failure(false)
    , default_config_loaded_at_startup(false)  {
  (void)_alloc;
    }



   typedef uint8_t _can_net_err_type;
  _can_net_err_type can_net_err;

   typedef uint8_t _overheat_type;
  _overheat_type overheat;

   typedef uint8_t _overvoltage_type;
  _overvoltage_type overvoltage;

   typedef uint8_t _undervoltage_type;
  _undervoltage_type undervoltage;

   typedef uint8_t _short_circuit_type;
  _short_circuit_type short_circuit;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef uint8_t _motor_or_sensor_setup_fault_type;
  _motor_or_sensor_setup_fault_type motor_or_sensor_setup_fault;

   typedef uint8_t _mosfet_failure_type;
  _mosfet_failure_type mosfet_failure;

   typedef uint8_t _default_config_loaded_at_startup_type;
  _default_config_loaded_at_startup_type default_config_loaded_at_startup;





  typedef boost::shared_ptr< ::panther_msgs::FaultFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::FaultFlag_<ContainerAllocator> const> ConstPtr;

}; // struct FaultFlag_

typedef ::panther_msgs::FaultFlag_<std::allocator<void> > FaultFlag;

typedef boost::shared_ptr< ::panther_msgs::FaultFlag > FaultFlagPtr;
typedef boost::shared_ptr< ::panther_msgs::FaultFlag const> FaultFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::FaultFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::FaultFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::FaultFlag_<ContainerAllocator1> & lhs, const ::panther_msgs::FaultFlag_<ContainerAllocator2> & rhs)
{
  return lhs.can_net_err == rhs.can_net_err &&
    lhs.overheat == rhs.overheat &&
    lhs.overvoltage == rhs.overvoltage &&
    lhs.undervoltage == rhs.undervoltage &&
    lhs.short_circuit == rhs.short_circuit &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.motor_or_sensor_setup_fault == rhs.motor_or_sensor_setup_fault &&
    lhs.mosfet_failure == rhs.mosfet_failure &&
    lhs.default_config_loaded_at_startup == rhs.default_config_loaded_at_startup;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::FaultFlag_<ContainerAllocator1> & lhs, const ::panther_msgs::FaultFlag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::FaultFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::FaultFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::FaultFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::FaultFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::FaultFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::FaultFlag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::FaultFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a07885f1bc8f54f267cfc6c4eab520b";
  }

  static const char* value(const ::panther_msgs::FaultFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a07885f1bc8f54fULL;
  static const uint64_t static_value2 = 0x267cfc6c4eab520bULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::FaultFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/FaultFlag";
  }

  static const char* value(const ::panther_msgs::FaultFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::FaultFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool can_net_err\n"
"bool overheat\n"
"bool overvoltage\n"
"bool undervoltage\n"
"bool short_circuit\n"
"bool emergency_stop\n"
"bool motor_or_sensor_setup_fault\n"
"bool mosfet_failure\n"
"bool default_config_loaded_at_startup\n"
;
  }

  static const char* value(const ::panther_msgs::FaultFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::FaultFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.can_net_err);
      stream.next(m.overheat);
      stream.next(m.overvoltage);
      stream.next(m.undervoltage);
      stream.next(m.short_circuit);
      stream.next(m.emergency_stop);
      stream.next(m.motor_or_sensor_setup_fault);
      stream.next(m.mosfet_failure);
      stream.next(m.default_config_loaded_at_startup);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::FaultFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::FaultFlag_<ContainerAllocator>& v)
  {
    s << indent << "can_net_err: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_net_err);
    s << indent << "overheat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overheat);
    s << indent << "overvoltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overvoltage);
    s << indent << "undervoltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.undervoltage);
    s << indent << "short_circuit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.short_circuit);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "motor_or_sensor_setup_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_or_sensor_setup_fault);
    s << indent << "mosfet_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mosfet_failure);
    s << indent << "default_config_loaded_at_startup: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.default_config_loaded_at_startup);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_FAULTFLAG_H
