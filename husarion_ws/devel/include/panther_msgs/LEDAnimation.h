// Generated by gencpp from file panther_msgs/LEDAnimation.msg
// DO NOT EDIT!


#ifndef PANTHER_MSGS_MESSAGE_LEDANIMATION_H
#define PANTHER_MSGS_MESSAGE_LEDANIMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panther_msgs
{
template <class ContainerAllocator>
struct LEDAnimation_
{
  typedef LEDAnimation_<ContainerAllocator> Type;

  LEDAnimation_()
    : id(0)
    , param()  {
    }
  LEDAnimation_(const ContainerAllocator& _alloc)
    : id(0)
    , param(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _param_type;
  _param_type param;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(E_STOP)
  #undef E_STOP
#endif
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(MANUAL_ACTION)
  #undef MANUAL_ACTION
#endif
#if defined(_WIN32) && defined(AUTONOMOUS_ACTION)
  #undef AUTONOMOUS_ACTION
#endif
#if defined(_WIN32) && defined(GOAL_ACHIEVED)
  #undef GOAL_ACHIEVED
#endif
#if defined(_WIN32) && defined(LOW_BATTERY)
  #undef LOW_BATTERY
#endif
#if defined(_WIN32) && defined(CRITICAL_BATTERY)
  #undef CRITICAL_BATTERY
#endif
#if defined(_WIN32) && defined(BATTERY_STATE)
  #undef BATTERY_STATE
#endif
#if defined(_WIN32) && defined(CHARGING_BATTERY)
  #undef CHARGING_BATTERY
#endif

  enum {
    E_STOP = 0u,
    READY = 1u,
    ERROR = 2u,
    MANUAL_ACTION = 3u,
    AUTONOMOUS_ACTION = 4u,
    GOAL_ACHIEVED = 5u,
    LOW_BATTERY = 6u,
    CRITICAL_BATTERY = 7u,
    BATTERY_STATE = 8u,
    CHARGING_BATTERY = 9u,
  };


  typedef boost::shared_ptr< ::panther_msgs::LEDAnimation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panther_msgs::LEDAnimation_<ContainerAllocator> const> ConstPtr;

}; // struct LEDAnimation_

typedef ::panther_msgs::LEDAnimation_<std::allocator<void> > LEDAnimation;

typedef boost::shared_ptr< ::panther_msgs::LEDAnimation > LEDAnimationPtr;
typedef boost::shared_ptr< ::panther_msgs::LEDAnimation const> LEDAnimationConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panther_msgs::LEDAnimation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panther_msgs::LEDAnimation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panther_msgs::LEDAnimation_<ContainerAllocator1> & lhs, const ::panther_msgs::LEDAnimation_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.param == rhs.param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panther_msgs::LEDAnimation_<ContainerAllocator1> & lhs, const ::panther_msgs::LEDAnimation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panther_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panther_msgs::LEDAnimation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panther_msgs::LEDAnimation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panther_msgs::LEDAnimation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f659758618bdff822f0aa756076978cd";
  }

  static const char* value(const ::panther_msgs::LEDAnimation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf659758618bdff82ULL;
  static const uint64_t static_value2 = 0x2f0aa756076978cdULL;
};

template<class ContainerAllocator>
struct DataType< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panther_msgs/LEDAnimation";
  }

  static const char* value(const ::panther_msgs::LEDAnimation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 E_STOP = 0\n"
"uint16 READY = 1\n"
"uint16 ERROR = 2\n"
"uint16 MANUAL_ACTION = 3\n"
"uint16 AUTONOMOUS_ACTION = 4\n"
"uint16 GOAL_ACHIEVED = 5\n"
"uint16 LOW_BATTERY = 6\n"
"uint16 CRITICAL_BATTERY = 7\n"
"uint16 BATTERY_STATE = 8\n"
"uint16 CHARGING_BATTERY = 9\n"
"\n"
"uint16 id\n"
"string param\n"
;
  }

  static const char* value(const ::panther_msgs::LEDAnimation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDAnimation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panther_msgs::LEDAnimation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panther_msgs::LEDAnimation_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHER_MSGS_MESSAGE_LEDANIMATION_H
