# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from panther_msgs/DriverState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import panther_msgs.msg

class DriverState(genpy.Message):
  _md5sum = "475379213c09f61430c9f6dcd6c19337"
  _type = "panther_msgs/DriverState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """panther_msgs/MotorControllerState front
panther_msgs/MotorControllerState rear
================================================================================
MSG: panther_msgs/MotorControllerState
float32 voltage
float32 current
float32 temperature
panther_msgs/FaultFlag fault_flag
panther_msgs/ScriptFlag script_flag
panther_msgs/MotorState left_motor
panther_msgs/MotorState right_motor
================================================================================
MSG: panther_msgs/FaultFlag
bool can_net_err
bool overheat
bool overvoltage
bool undervoltage
bool short_circuit
bool emergency_stop
bool motor_or_sensor_setup_fault
bool mosfet_failure
bool default_config_loaded_at_startup
================================================================================
MSG: panther_msgs/ScriptFlag
bool loop_error
bool encoder_disconected
bool amp_limiter
================================================================================
MSG: panther_msgs/MotorState
string motor_joint_name
panther_msgs/RuntimeError runtime_error
================================================================================
MSG: panther_msgs/RuntimeError
bool amps_limit_active
bool motor_stall
bool loop_error
bool safety_stop_active
bool forward_limit_triggered
bool reverse_limit_triggered
bool amps_trigger_activated"""
  __slots__ = ['front','rear']
  _slot_types = ['panther_msgs/MotorControllerState','panther_msgs/MotorControllerState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       front,rear

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriverState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.front is None:
        self.front = panther_msgs.msg.MotorControllerState()
      if self.rear is None:
        self.rear = panther_msgs.msg.MotorControllerState()
    else:
      self.front = panther_msgs.msg.MotorControllerState()
      self.rear = panther_msgs.msg.MotorControllerState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f12B().pack(_x.front.voltage, _x.front.current, _x.front.temperature, _x.front.fault_flag.can_net_err, _x.front.fault_flag.overheat, _x.front.fault_flag.overvoltage, _x.front.fault_flag.undervoltage, _x.front.fault_flag.short_circuit, _x.front.fault_flag.emergency_stop, _x.front.fault_flag.motor_or_sensor_setup_fault, _x.front.fault_flag.mosfet_failure, _x.front.fault_flag.default_config_loaded_at_startup, _x.front.script_flag.loop_error, _x.front.script_flag.encoder_disconected, _x.front.script_flag.amp_limiter))
      _x = self.front.left_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.front.left_motor.runtime_error.amps_limit_active, _x.front.left_motor.runtime_error.motor_stall, _x.front.left_motor.runtime_error.loop_error, _x.front.left_motor.runtime_error.safety_stop_active, _x.front.left_motor.runtime_error.forward_limit_triggered, _x.front.left_motor.runtime_error.reverse_limit_triggered, _x.front.left_motor.runtime_error.amps_trigger_activated))
      _x = self.front.right_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3f12B().pack(_x.front.right_motor.runtime_error.amps_limit_active, _x.front.right_motor.runtime_error.motor_stall, _x.front.right_motor.runtime_error.loop_error, _x.front.right_motor.runtime_error.safety_stop_active, _x.front.right_motor.runtime_error.forward_limit_triggered, _x.front.right_motor.runtime_error.reverse_limit_triggered, _x.front.right_motor.runtime_error.amps_trigger_activated, _x.rear.voltage, _x.rear.current, _x.rear.temperature, _x.rear.fault_flag.can_net_err, _x.rear.fault_flag.overheat, _x.rear.fault_flag.overvoltage, _x.rear.fault_flag.undervoltage, _x.rear.fault_flag.short_circuit, _x.rear.fault_flag.emergency_stop, _x.rear.fault_flag.motor_or_sensor_setup_fault, _x.rear.fault_flag.mosfet_failure, _x.rear.fault_flag.default_config_loaded_at_startup, _x.rear.script_flag.loop_error, _x.rear.script_flag.encoder_disconected, _x.rear.script_flag.amp_limiter))
      _x = self.rear.left_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.rear.left_motor.runtime_error.amps_limit_active, _x.rear.left_motor.runtime_error.motor_stall, _x.rear.left_motor.runtime_error.loop_error, _x.rear.left_motor.runtime_error.safety_stop_active, _x.rear.left_motor.runtime_error.forward_limit_triggered, _x.rear.left_motor.runtime_error.reverse_limit_triggered, _x.rear.left_motor.runtime_error.amps_trigger_activated))
      _x = self.rear.right_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.rear.right_motor.runtime_error.amps_limit_active, _x.rear.right_motor.runtime_error.motor_stall, _x.rear.right_motor.runtime_error.loop_error, _x.rear.right_motor.runtime_error.safety_stop_active, _x.rear.right_motor.runtime_error.forward_limit_triggered, _x.rear.right_motor.runtime_error.reverse_limit_triggered, _x.rear.right_motor.runtime_error.amps_trigger_activated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.front is None:
        self.front = panther_msgs.msg.MotorControllerState()
      if self.rear is None:
        self.rear = panther_msgs.msg.MotorControllerState()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.front.voltage, _x.front.current, _x.front.temperature, _x.front.fault_flag.can_net_err, _x.front.fault_flag.overheat, _x.front.fault_flag.overvoltage, _x.front.fault_flag.undervoltage, _x.front.fault_flag.short_circuit, _x.front.fault_flag.emergency_stop, _x.front.fault_flag.motor_or_sensor_setup_fault, _x.front.fault_flag.mosfet_failure, _x.front.fault_flag.default_config_loaded_at_startup, _x.front.script_flag.loop_error, _x.front.script_flag.encoder_disconected, _x.front.script_flag.amp_limiter,) = _get_struct_3f12B().unpack(str[start:end])
      self.front.fault_flag.can_net_err = bool(self.front.fault_flag.can_net_err)
      self.front.fault_flag.overheat = bool(self.front.fault_flag.overheat)
      self.front.fault_flag.overvoltage = bool(self.front.fault_flag.overvoltage)
      self.front.fault_flag.undervoltage = bool(self.front.fault_flag.undervoltage)
      self.front.fault_flag.short_circuit = bool(self.front.fault_flag.short_circuit)
      self.front.fault_flag.emergency_stop = bool(self.front.fault_flag.emergency_stop)
      self.front.fault_flag.motor_or_sensor_setup_fault = bool(self.front.fault_flag.motor_or_sensor_setup_fault)
      self.front.fault_flag.mosfet_failure = bool(self.front.fault_flag.mosfet_failure)
      self.front.fault_flag.default_config_loaded_at_startup = bool(self.front.fault_flag.default_config_loaded_at_startup)
      self.front.script_flag.loop_error = bool(self.front.script_flag.loop_error)
      self.front.script_flag.encoder_disconected = bool(self.front.script_flag.encoder_disconected)
      self.front.script_flag.amp_limiter = bool(self.front.script_flag.amp_limiter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front.left_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front.left_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.front.left_motor.runtime_error.amps_limit_active, _x.front.left_motor.runtime_error.motor_stall, _x.front.left_motor.runtime_error.loop_error, _x.front.left_motor.runtime_error.safety_stop_active, _x.front.left_motor.runtime_error.forward_limit_triggered, _x.front.left_motor.runtime_error.reverse_limit_triggered, _x.front.left_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.front.left_motor.runtime_error.amps_limit_active = bool(self.front.left_motor.runtime_error.amps_limit_active)
      self.front.left_motor.runtime_error.motor_stall = bool(self.front.left_motor.runtime_error.motor_stall)
      self.front.left_motor.runtime_error.loop_error = bool(self.front.left_motor.runtime_error.loop_error)
      self.front.left_motor.runtime_error.safety_stop_active = bool(self.front.left_motor.runtime_error.safety_stop_active)
      self.front.left_motor.runtime_error.forward_limit_triggered = bool(self.front.left_motor.runtime_error.forward_limit_triggered)
      self.front.left_motor.runtime_error.reverse_limit_triggered = bool(self.front.left_motor.runtime_error.reverse_limit_triggered)
      self.front.left_motor.runtime_error.amps_trigger_activated = bool(self.front.left_motor.runtime_error.amps_trigger_activated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front.right_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front.right_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.front.right_motor.runtime_error.amps_limit_active, _x.front.right_motor.runtime_error.motor_stall, _x.front.right_motor.runtime_error.loop_error, _x.front.right_motor.runtime_error.safety_stop_active, _x.front.right_motor.runtime_error.forward_limit_triggered, _x.front.right_motor.runtime_error.reverse_limit_triggered, _x.front.right_motor.runtime_error.amps_trigger_activated, _x.rear.voltage, _x.rear.current, _x.rear.temperature, _x.rear.fault_flag.can_net_err, _x.rear.fault_flag.overheat, _x.rear.fault_flag.overvoltage, _x.rear.fault_flag.undervoltage, _x.rear.fault_flag.short_circuit, _x.rear.fault_flag.emergency_stop, _x.rear.fault_flag.motor_or_sensor_setup_fault, _x.rear.fault_flag.mosfet_failure, _x.rear.fault_flag.default_config_loaded_at_startup, _x.rear.script_flag.loop_error, _x.rear.script_flag.encoder_disconected, _x.rear.script_flag.amp_limiter,) = _get_struct_7B3f12B().unpack(str[start:end])
      self.front.right_motor.runtime_error.amps_limit_active = bool(self.front.right_motor.runtime_error.amps_limit_active)
      self.front.right_motor.runtime_error.motor_stall = bool(self.front.right_motor.runtime_error.motor_stall)
      self.front.right_motor.runtime_error.loop_error = bool(self.front.right_motor.runtime_error.loop_error)
      self.front.right_motor.runtime_error.safety_stop_active = bool(self.front.right_motor.runtime_error.safety_stop_active)
      self.front.right_motor.runtime_error.forward_limit_triggered = bool(self.front.right_motor.runtime_error.forward_limit_triggered)
      self.front.right_motor.runtime_error.reverse_limit_triggered = bool(self.front.right_motor.runtime_error.reverse_limit_triggered)
      self.front.right_motor.runtime_error.amps_trigger_activated = bool(self.front.right_motor.runtime_error.amps_trigger_activated)
      self.rear.fault_flag.can_net_err = bool(self.rear.fault_flag.can_net_err)
      self.rear.fault_flag.overheat = bool(self.rear.fault_flag.overheat)
      self.rear.fault_flag.overvoltage = bool(self.rear.fault_flag.overvoltage)
      self.rear.fault_flag.undervoltage = bool(self.rear.fault_flag.undervoltage)
      self.rear.fault_flag.short_circuit = bool(self.rear.fault_flag.short_circuit)
      self.rear.fault_flag.emergency_stop = bool(self.rear.fault_flag.emergency_stop)
      self.rear.fault_flag.motor_or_sensor_setup_fault = bool(self.rear.fault_flag.motor_or_sensor_setup_fault)
      self.rear.fault_flag.mosfet_failure = bool(self.rear.fault_flag.mosfet_failure)
      self.rear.fault_flag.default_config_loaded_at_startup = bool(self.rear.fault_flag.default_config_loaded_at_startup)
      self.rear.script_flag.loop_error = bool(self.rear.script_flag.loop_error)
      self.rear.script_flag.encoder_disconected = bool(self.rear.script_flag.encoder_disconected)
      self.rear.script_flag.amp_limiter = bool(self.rear.script_flag.amp_limiter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rear.left_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rear.left_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.rear.left_motor.runtime_error.amps_limit_active, _x.rear.left_motor.runtime_error.motor_stall, _x.rear.left_motor.runtime_error.loop_error, _x.rear.left_motor.runtime_error.safety_stop_active, _x.rear.left_motor.runtime_error.forward_limit_triggered, _x.rear.left_motor.runtime_error.reverse_limit_triggered, _x.rear.left_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.rear.left_motor.runtime_error.amps_limit_active = bool(self.rear.left_motor.runtime_error.amps_limit_active)
      self.rear.left_motor.runtime_error.motor_stall = bool(self.rear.left_motor.runtime_error.motor_stall)
      self.rear.left_motor.runtime_error.loop_error = bool(self.rear.left_motor.runtime_error.loop_error)
      self.rear.left_motor.runtime_error.safety_stop_active = bool(self.rear.left_motor.runtime_error.safety_stop_active)
      self.rear.left_motor.runtime_error.forward_limit_triggered = bool(self.rear.left_motor.runtime_error.forward_limit_triggered)
      self.rear.left_motor.runtime_error.reverse_limit_triggered = bool(self.rear.left_motor.runtime_error.reverse_limit_triggered)
      self.rear.left_motor.runtime_error.amps_trigger_activated = bool(self.rear.left_motor.runtime_error.amps_trigger_activated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rear.right_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rear.right_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.rear.right_motor.runtime_error.amps_limit_active, _x.rear.right_motor.runtime_error.motor_stall, _x.rear.right_motor.runtime_error.loop_error, _x.rear.right_motor.runtime_error.safety_stop_active, _x.rear.right_motor.runtime_error.forward_limit_triggered, _x.rear.right_motor.runtime_error.reverse_limit_triggered, _x.rear.right_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.rear.right_motor.runtime_error.amps_limit_active = bool(self.rear.right_motor.runtime_error.amps_limit_active)
      self.rear.right_motor.runtime_error.motor_stall = bool(self.rear.right_motor.runtime_error.motor_stall)
      self.rear.right_motor.runtime_error.loop_error = bool(self.rear.right_motor.runtime_error.loop_error)
      self.rear.right_motor.runtime_error.safety_stop_active = bool(self.rear.right_motor.runtime_error.safety_stop_active)
      self.rear.right_motor.runtime_error.forward_limit_triggered = bool(self.rear.right_motor.runtime_error.forward_limit_triggered)
      self.rear.right_motor.runtime_error.reverse_limit_triggered = bool(self.rear.right_motor.runtime_error.reverse_limit_triggered)
      self.rear.right_motor.runtime_error.amps_trigger_activated = bool(self.rear.right_motor.runtime_error.amps_trigger_activated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f12B().pack(_x.front.voltage, _x.front.current, _x.front.temperature, _x.front.fault_flag.can_net_err, _x.front.fault_flag.overheat, _x.front.fault_flag.overvoltage, _x.front.fault_flag.undervoltage, _x.front.fault_flag.short_circuit, _x.front.fault_flag.emergency_stop, _x.front.fault_flag.motor_or_sensor_setup_fault, _x.front.fault_flag.mosfet_failure, _x.front.fault_flag.default_config_loaded_at_startup, _x.front.script_flag.loop_error, _x.front.script_flag.encoder_disconected, _x.front.script_flag.amp_limiter))
      _x = self.front.left_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.front.left_motor.runtime_error.amps_limit_active, _x.front.left_motor.runtime_error.motor_stall, _x.front.left_motor.runtime_error.loop_error, _x.front.left_motor.runtime_error.safety_stop_active, _x.front.left_motor.runtime_error.forward_limit_triggered, _x.front.left_motor.runtime_error.reverse_limit_triggered, _x.front.left_motor.runtime_error.amps_trigger_activated))
      _x = self.front.right_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3f12B().pack(_x.front.right_motor.runtime_error.amps_limit_active, _x.front.right_motor.runtime_error.motor_stall, _x.front.right_motor.runtime_error.loop_error, _x.front.right_motor.runtime_error.safety_stop_active, _x.front.right_motor.runtime_error.forward_limit_triggered, _x.front.right_motor.runtime_error.reverse_limit_triggered, _x.front.right_motor.runtime_error.amps_trigger_activated, _x.rear.voltage, _x.rear.current, _x.rear.temperature, _x.rear.fault_flag.can_net_err, _x.rear.fault_flag.overheat, _x.rear.fault_flag.overvoltage, _x.rear.fault_flag.undervoltage, _x.rear.fault_flag.short_circuit, _x.rear.fault_flag.emergency_stop, _x.rear.fault_flag.motor_or_sensor_setup_fault, _x.rear.fault_flag.mosfet_failure, _x.rear.fault_flag.default_config_loaded_at_startup, _x.rear.script_flag.loop_error, _x.rear.script_flag.encoder_disconected, _x.rear.script_flag.amp_limiter))
      _x = self.rear.left_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.rear.left_motor.runtime_error.amps_limit_active, _x.rear.left_motor.runtime_error.motor_stall, _x.rear.left_motor.runtime_error.loop_error, _x.rear.left_motor.runtime_error.safety_stop_active, _x.rear.left_motor.runtime_error.forward_limit_triggered, _x.rear.left_motor.runtime_error.reverse_limit_triggered, _x.rear.left_motor.runtime_error.amps_trigger_activated))
      _x = self.rear.right_motor.motor_joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.rear.right_motor.runtime_error.amps_limit_active, _x.rear.right_motor.runtime_error.motor_stall, _x.rear.right_motor.runtime_error.loop_error, _x.rear.right_motor.runtime_error.safety_stop_active, _x.rear.right_motor.runtime_error.forward_limit_triggered, _x.rear.right_motor.runtime_error.reverse_limit_triggered, _x.rear.right_motor.runtime_error.amps_trigger_activated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.front is None:
        self.front = panther_msgs.msg.MotorControllerState()
      if self.rear is None:
        self.rear = panther_msgs.msg.MotorControllerState()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.front.voltage, _x.front.current, _x.front.temperature, _x.front.fault_flag.can_net_err, _x.front.fault_flag.overheat, _x.front.fault_flag.overvoltage, _x.front.fault_flag.undervoltage, _x.front.fault_flag.short_circuit, _x.front.fault_flag.emergency_stop, _x.front.fault_flag.motor_or_sensor_setup_fault, _x.front.fault_flag.mosfet_failure, _x.front.fault_flag.default_config_loaded_at_startup, _x.front.script_flag.loop_error, _x.front.script_flag.encoder_disconected, _x.front.script_flag.amp_limiter,) = _get_struct_3f12B().unpack(str[start:end])
      self.front.fault_flag.can_net_err = bool(self.front.fault_flag.can_net_err)
      self.front.fault_flag.overheat = bool(self.front.fault_flag.overheat)
      self.front.fault_flag.overvoltage = bool(self.front.fault_flag.overvoltage)
      self.front.fault_flag.undervoltage = bool(self.front.fault_flag.undervoltage)
      self.front.fault_flag.short_circuit = bool(self.front.fault_flag.short_circuit)
      self.front.fault_flag.emergency_stop = bool(self.front.fault_flag.emergency_stop)
      self.front.fault_flag.motor_or_sensor_setup_fault = bool(self.front.fault_flag.motor_or_sensor_setup_fault)
      self.front.fault_flag.mosfet_failure = bool(self.front.fault_flag.mosfet_failure)
      self.front.fault_flag.default_config_loaded_at_startup = bool(self.front.fault_flag.default_config_loaded_at_startup)
      self.front.script_flag.loop_error = bool(self.front.script_flag.loop_error)
      self.front.script_flag.encoder_disconected = bool(self.front.script_flag.encoder_disconected)
      self.front.script_flag.amp_limiter = bool(self.front.script_flag.amp_limiter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front.left_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front.left_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.front.left_motor.runtime_error.amps_limit_active, _x.front.left_motor.runtime_error.motor_stall, _x.front.left_motor.runtime_error.loop_error, _x.front.left_motor.runtime_error.safety_stop_active, _x.front.left_motor.runtime_error.forward_limit_triggered, _x.front.left_motor.runtime_error.reverse_limit_triggered, _x.front.left_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.front.left_motor.runtime_error.amps_limit_active = bool(self.front.left_motor.runtime_error.amps_limit_active)
      self.front.left_motor.runtime_error.motor_stall = bool(self.front.left_motor.runtime_error.motor_stall)
      self.front.left_motor.runtime_error.loop_error = bool(self.front.left_motor.runtime_error.loop_error)
      self.front.left_motor.runtime_error.safety_stop_active = bool(self.front.left_motor.runtime_error.safety_stop_active)
      self.front.left_motor.runtime_error.forward_limit_triggered = bool(self.front.left_motor.runtime_error.forward_limit_triggered)
      self.front.left_motor.runtime_error.reverse_limit_triggered = bool(self.front.left_motor.runtime_error.reverse_limit_triggered)
      self.front.left_motor.runtime_error.amps_trigger_activated = bool(self.front.left_motor.runtime_error.amps_trigger_activated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front.right_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front.right_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.front.right_motor.runtime_error.amps_limit_active, _x.front.right_motor.runtime_error.motor_stall, _x.front.right_motor.runtime_error.loop_error, _x.front.right_motor.runtime_error.safety_stop_active, _x.front.right_motor.runtime_error.forward_limit_triggered, _x.front.right_motor.runtime_error.reverse_limit_triggered, _x.front.right_motor.runtime_error.amps_trigger_activated, _x.rear.voltage, _x.rear.current, _x.rear.temperature, _x.rear.fault_flag.can_net_err, _x.rear.fault_flag.overheat, _x.rear.fault_flag.overvoltage, _x.rear.fault_flag.undervoltage, _x.rear.fault_flag.short_circuit, _x.rear.fault_flag.emergency_stop, _x.rear.fault_flag.motor_or_sensor_setup_fault, _x.rear.fault_flag.mosfet_failure, _x.rear.fault_flag.default_config_loaded_at_startup, _x.rear.script_flag.loop_error, _x.rear.script_flag.encoder_disconected, _x.rear.script_flag.amp_limiter,) = _get_struct_7B3f12B().unpack(str[start:end])
      self.front.right_motor.runtime_error.amps_limit_active = bool(self.front.right_motor.runtime_error.amps_limit_active)
      self.front.right_motor.runtime_error.motor_stall = bool(self.front.right_motor.runtime_error.motor_stall)
      self.front.right_motor.runtime_error.loop_error = bool(self.front.right_motor.runtime_error.loop_error)
      self.front.right_motor.runtime_error.safety_stop_active = bool(self.front.right_motor.runtime_error.safety_stop_active)
      self.front.right_motor.runtime_error.forward_limit_triggered = bool(self.front.right_motor.runtime_error.forward_limit_triggered)
      self.front.right_motor.runtime_error.reverse_limit_triggered = bool(self.front.right_motor.runtime_error.reverse_limit_triggered)
      self.front.right_motor.runtime_error.amps_trigger_activated = bool(self.front.right_motor.runtime_error.amps_trigger_activated)
      self.rear.fault_flag.can_net_err = bool(self.rear.fault_flag.can_net_err)
      self.rear.fault_flag.overheat = bool(self.rear.fault_flag.overheat)
      self.rear.fault_flag.overvoltage = bool(self.rear.fault_flag.overvoltage)
      self.rear.fault_flag.undervoltage = bool(self.rear.fault_flag.undervoltage)
      self.rear.fault_flag.short_circuit = bool(self.rear.fault_flag.short_circuit)
      self.rear.fault_flag.emergency_stop = bool(self.rear.fault_flag.emergency_stop)
      self.rear.fault_flag.motor_or_sensor_setup_fault = bool(self.rear.fault_flag.motor_or_sensor_setup_fault)
      self.rear.fault_flag.mosfet_failure = bool(self.rear.fault_flag.mosfet_failure)
      self.rear.fault_flag.default_config_loaded_at_startup = bool(self.rear.fault_flag.default_config_loaded_at_startup)
      self.rear.script_flag.loop_error = bool(self.rear.script_flag.loop_error)
      self.rear.script_flag.encoder_disconected = bool(self.rear.script_flag.encoder_disconected)
      self.rear.script_flag.amp_limiter = bool(self.rear.script_flag.amp_limiter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rear.left_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rear.left_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.rear.left_motor.runtime_error.amps_limit_active, _x.rear.left_motor.runtime_error.motor_stall, _x.rear.left_motor.runtime_error.loop_error, _x.rear.left_motor.runtime_error.safety_stop_active, _x.rear.left_motor.runtime_error.forward_limit_triggered, _x.rear.left_motor.runtime_error.reverse_limit_triggered, _x.rear.left_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.rear.left_motor.runtime_error.amps_limit_active = bool(self.rear.left_motor.runtime_error.amps_limit_active)
      self.rear.left_motor.runtime_error.motor_stall = bool(self.rear.left_motor.runtime_error.motor_stall)
      self.rear.left_motor.runtime_error.loop_error = bool(self.rear.left_motor.runtime_error.loop_error)
      self.rear.left_motor.runtime_error.safety_stop_active = bool(self.rear.left_motor.runtime_error.safety_stop_active)
      self.rear.left_motor.runtime_error.forward_limit_triggered = bool(self.rear.left_motor.runtime_error.forward_limit_triggered)
      self.rear.left_motor.runtime_error.reverse_limit_triggered = bool(self.rear.left_motor.runtime_error.reverse_limit_triggered)
      self.rear.left_motor.runtime_error.amps_trigger_activated = bool(self.rear.left_motor.runtime_error.amps_trigger_activated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rear.right_motor.motor_joint_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rear.right_motor.motor_joint_name = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.rear.right_motor.runtime_error.amps_limit_active, _x.rear.right_motor.runtime_error.motor_stall, _x.rear.right_motor.runtime_error.loop_error, _x.rear.right_motor.runtime_error.safety_stop_active, _x.rear.right_motor.runtime_error.forward_limit_triggered, _x.rear.right_motor.runtime_error.reverse_limit_triggered, _x.rear.right_motor.runtime_error.amps_trigger_activated,) = _get_struct_7B().unpack(str[start:end])
      self.rear.right_motor.runtime_error.amps_limit_active = bool(self.rear.right_motor.runtime_error.amps_limit_active)
      self.rear.right_motor.runtime_error.motor_stall = bool(self.rear.right_motor.runtime_error.motor_stall)
      self.rear.right_motor.runtime_error.loop_error = bool(self.rear.right_motor.runtime_error.loop_error)
      self.rear.right_motor.runtime_error.safety_stop_active = bool(self.rear.right_motor.runtime_error.safety_stop_active)
      self.rear.right_motor.runtime_error.forward_limit_triggered = bool(self.rear.right_motor.runtime_error.forward_limit_triggered)
      self.rear.right_motor.runtime_error.reverse_limit_triggered = bool(self.rear.right_motor.runtime_error.reverse_limit_triggered)
      self.rear.right_motor.runtime_error.amps_trigger_activated = bool(self.rear.right_motor.runtime_error.amps_trigger_activated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f12B = None
def _get_struct_3f12B():
    global _struct_3f12B
    if _struct_3f12B is None:
        _struct_3f12B = struct.Struct("<3f12B")
    return _struct_3f12B
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_7B3f12B = None
def _get_struct_7B3f12B():
    global _struct_7B3f12B
    if _struct_7B3f12B is None:
        _struct_7B3f12B = struct.Struct("<7B3f12B")
    return _struct_7B3f12B
