# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from panther_msgs/LEDImageAnimation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LEDImageAnimation(genpy.Message):
  _md5sum = "e28603d00b7f8b45434019f01a6bcf71"
  _type = "panther_msgs/LEDImageAnimation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string image
float32 duration
float32 brightness
uint8 repeat
uint32 color"""
  __slots__ = ['image','duration','brightness','repeat','color']
  _slot_types = ['string','float32','float32','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       image,duration,brightness,repeat,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LEDImageAnimation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.image is None:
        self.image = ''
      if self.duration is None:
        self.duration = 0.
      if self.brightness is None:
        self.brightness = 0.
      if self.repeat is None:
        self.repeat = 0
      if self.color is None:
        self.color = 0
    else:
      self.image = ''
      self.duration = 0.
      self.brightness = 0.
      self.repeat = 0
      self.color = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.image
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fBI().pack(_x.duration, _x.brightness, _x.repeat, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.duration, _x.brightness, _x.repeat, _x.color,) = _get_struct_2fBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.image
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fBI().pack(_x.duration, _x.brightness, _x.repeat, _x.color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.duration, _x.brightness, _x.repeat, _x.color,) = _get_struct_2fBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBI = None
def _get_struct_2fBI():
    global _struct_2fBI
    if _struct_2fBI is None:
        _struct_2fBI = struct.Struct("<2fBI")
    return _struct_2fBI
